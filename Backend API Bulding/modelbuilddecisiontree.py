# -*- coding: utf-8 -*-
"""ModelBuildDecisionTree

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h6q21lnMz7TRGjRsT2DZ_T9wIbb-WCq0
"""

import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import StratifiedShuffleSplit,KFold
import pickle

# Code to read csv file into Colaboratory:
!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

link='https://drive.google.com/open?id=1S0kqcUYednLGkHd6Np3MGWYfHSLWJpeW'
fluff, id = link.split('=')
print (id) # Verify that you have everything after '='
downloaded = drive.CreateFile({'id':id}) 
downloaded.GetContentFile('finaldata_v1.1.csv')  
df = pd.read_csv('finaldata_v1.1.csv',usecols=['Recency','Frequency','Monetary','CCategory','lable'])
df.head()

def encode_target(df,target_col):
  df_temp=df.copy()
  target=df_temp[target_col].unique()
  map_2_int={name: n for n, name in enumerate(target)}
  #print(map_2_int) {'H': 0, 'L': 1, 'M': 2, 'N': 3}
  df_temp["Target"] = df_temp[target_col].replace(map_2_int)
  return (df_temp, target)


df2, target = encode_target(df, "lable")
df2.head()

#converting object type of CCAtegory col to int dtype
def encode_category(df,cat_col):
  df_temp1=df2.copy()
  unq_cat=df_temp1['CCategory'].unique().tolist()         #13 unique categories
  map_2_int={name: n for n, name in enumerate(unq_cat,100)}
  '''{'CA3203': 100, 'CA1726': 101, 'CA5616': 102, 'CA3509': 103, 
      'CA2202': 104, 'CA5619': 105, 'CA5558': 106, 'CA4401': 107, 
      'CA2119': 108, 'CA9909': 109, 'CA1703': 110, 'CA6202': 111, 'CA3504': 112}'''
  df_temp1["CCategory_int"] = df_temp1[cat_col].replace(map_2_int)
  return (df_temp1, unq_cat)

df2, unq_cat = encode_category(df2, "CCategory")
df2=df2[['Recency','Frequency','Monetary','CCategory_int','CCategory','lable','Target']]
df2.head()

#print(df2.columns[:4])
features = list(df2.columns[:4])
print("* features:", features, sep="\n")
y=df2['Target']
X=df2[features]

#stratified sampling
sss = StratifiedShuffleSplit(n_splits=5, test_size=0.2, random_state=0)
sss.get_n_splits(X, y)
for train_idx, test_idx in sss.split(X, y):
    X_train,X_test=X.iloc[train_idx],X.iloc[test_idx]
    y_train,y_test=y.iloc[train_idx],y.iloc[test_idx]
print('done')

#Kfold
kf = KFold(n_splits=10)
kf.get_n_splits(X_train)

dt = DecisionTreeClassifier()
score=[]

for train_index, valid_index in kf.split(X_train):
     print("TRAIN:", train_index, "VALIDATION:", valid_index,"\n\n")
     Xv_train, X_valid = X_train.iloc[train_index], X_train.iloc[valid_index]
     yv_train, y_valid = y_train.iloc[train_index], y_train.iloc[valid_index]
     dt.fit(Xv_train, yv_train)
     yv_predict=dt.predict(X_valid)
     score.append(dt.score(X_valid, y_valid))
     print("Accuracy",score[-1])
  
finalscore=dt.score(X_test,y_test)
print("final:",finalscore)

from google.colab import drive
drive.mount('/content/gdrive')

filename = 'finalized_Decision_Tree_80+20_split.sav'
pickle.dump(dt, open(filename, 'wb'))

loaded_model = pickle.load(open(filename, 'rb'))

result = loaded_model.score(X_test, y_test)
print(result)